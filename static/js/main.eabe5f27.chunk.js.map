{"version":3,"sources":["Menu.js","Searchbox.js","Card.js","CardList.js","getCards.js","App.js","serviceWorker.js","index.js"],"names":["Menu","value","setValue","onChange","event","target","Searchbox","type","placeholder","Card","card","className","title","infos","map","info","key","CardList","itens","genero","countItens","nome","length","cards","item","episode_id","opening_crawl","director","producer","release_date","name","birth_year","eye_color","gender","height","mass","homeworld","films","species","starships","vehicles","diameter","rotation_period","orbital_period","gravity","population","climate","terrain","surface_water","residents","classification","designation","average_height","average_lifespan","eye_colors","skin_colors","language","people","model","starship_class","manufacturer","cost_in_credits","crew","passengers","max_atmosphering_speed","cargo_capacity","pilots","vehicle_class","getCards","App","componentDidMount","fetch","state","select","searchfield","then","response","json","setState","elementos","results","this","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eabe5f27.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Menu = ({value, setValue}) => {\r\n    \r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <label>\r\n                Sobre o que deseja saber mais? <br>\r\n                </br><br>\r\n                </br>\r\n                <select value={value} onChange={handleChange}>\r\n                    <option value=\"films\">Filmes</option>\r\n                    <option value=\"people\">Personagens</option>\r\n                    <option value=\"planets\">Planetas</option>\r\n                    <option value=\"species\">Espécies</option>\r\n                    <option value=\"starships\">Naves</option>\r\n                    <option value=\"vehicles\">Veículos</option>\r\n                </select>\r\n            </label>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst Searchbox = ({value, setValue}) => {\r\n    \r\n    const searchChange = (event) => {\r\n        setValue(event.target.value);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <input \r\n                type='search' \r\n                placeholder='digite aqui'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Card = ({card}) => {\r\n    return (\r\n        <div className='div2'>\r\n            <h2>{card.title}</h2>\r\n            {card.infos.map(info => (\r\n                <div key={info.title}>\r\n                    <div className='titulo'>\r\n                        {info.title}:\r\n                    </div>\r\n                    <div className='texto'>\r\n                        {info.value} \r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport {getCards} from './getCards.js'\r\n\r\nconst CardList = ({itens, genero, nome}) => {\r\n    let countItens = itens.length;\r\n    let cards = getCards(genero, itens);\r\n\r\n    return (\r\n        <div>\r\n            <p>Mostrando: {countItens} itens.</p>\r\n\r\n            {cards.map(card=>(\r\n                <Card key={card.title} card={card} />\r\n            ))}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CardList;","export function getCards(genero, itens) {\r\n    switch (genero) {\r\n        case \"films\":\r\n            return itens.map(item => ({\r\n                title: item.title,\r\n                infos: [{\r\n                    title: \"ID do filme\",\r\n                    value: item.episode_id\r\n                },\r\n                {\r\n                    title: \"Sinopse\",\r\n                    value: item.opening_crawl\r\n                },\r\n                {\r\n                    title: \"Diretor\",\r\n                    value: item.director \r\n                },\r\n                {\r\n                    title: \"Produtor\",\r\n                    value: item.producer  \r\n                },\r\n                {\r\n                    title: \"Ano de lançamento\",\r\n                    value: item.release_date   \r\n                },\r\n                ]\r\n            }))\r\n        case \"people\":\r\n            return itens.map(item => ({\r\n                title: item.name,\r\n                infos: [{\r\n                    title: \"Ano de nascimento\",\r\n                    value: item.birth_year \r\n                },\r\n                {\r\n                    title: \"Cor dos olhos\",\r\n                    value: item.eye_color\r\n                },\r\n                {\r\n                    title: \"Sexo\",\r\n                    value: item.gender \r\n                },\r\n                {\r\n                    title: \"Altura\",\r\n                    value: item.height \r\n                },\r\n                {\r\n                    title: \"Peso\",\r\n                    value: item.mass  \r\n                },\r\n                {\r\n                    title: \"Naturalidade\",\r\n                    value: item.homeworld   \r\n                },\r\n                {\r\n                    title: \"Filmes que participa\",\r\n                    value: item.films    \r\n                },\r\n                {\r\n                    title: \"Espécies\",\r\n                    value: item.species     \r\n                },\r\n                {\r\n                    title: \"Starship\",\r\n                    value: item.starships      \r\n                },\r\n                {\r\n                    title: \"Veículos\",\r\n                    value: item.vehicles       \r\n                }]\r\n            }))\r\n        case \"planets\":\r\n            return itens.map(item => ({\r\n                title: item.name,\r\n                infos: [{\r\n                    title: \"Diametro\",\r\n                    value: item.diameter\r\n                },\r\n                {\r\n                    title: \"Período de Rotação\",\r\n                    value: item.rotation_period\r\n                },\r\n                {\r\n                    title: \"Período de Órbita\",\r\n                    value: item.orbital_period \r\n                },\r\n                {\r\n                    title: \"Gravidade\",\r\n                    value: item.gravity  \r\n                },\r\n                {\r\n                    title: \"População\",\r\n                    value: item.population   \r\n                },\r\n                {\r\n                    title: \"Clima\",\r\n                    value: item.climate    \r\n                },\r\n                {\r\n                    title: \"Terreno\",\r\n                    value: item.terrain     \r\n                },\r\n                {\r\n                    title: \"Supercífie D'água\",\r\n                    value: item.surface_water      \r\n                },\r\n                {\r\n                    title: \"Residentes\",\r\n                    value: item.residents       \r\n                }\r\n                ]\r\n            }))\r\n        case \"species\":\r\n            return itens.map(item => ({\r\n                title: item.name,\r\n                infos: [{\r\n                    title: \"Classificação\",\r\n                    value: item.classification \r\n                },\r\n                {\r\n                    title: \"Designação\",\r\n                    value: item.designation \r\n                },\r\n                {\r\n                    title: \"Média de altura\",\r\n                    value: item.average_height  \r\n                },\r\n                {\r\n                    title: \"Media de idade\",\r\n                    value: item.average_lifespan   \r\n                },\r\n                {\r\n                    title: \"Cor dos olhos\",\r\n                    value: item.eye_colors    \r\n                },\r\n                {\r\n                    title: \"Cor da pele\",\r\n                    value: item.skin_colors     \r\n                },\r\n                {\r\n                    title: \"Linguagem\",\r\n                    value: item.language      \r\n                },\r\n                {\r\n                    title: \"Planeta de origem\",\r\n                    value: item.homeworld       \r\n                },\r\n                {\r\n                    title: \"Pessoas\",\r\n                    value: item.people        \r\n                }\r\n                ]\r\n            }))\r\n        case \"starships\":\r\n            return itens.map(item => ({\r\n                title: item.name,\r\n                infos: [{\r\n                    title: \"Modelo\",\r\n                    value: item.model  \r\n                },\r\n                {\r\n                    title: \"Classe\",\r\n                    value: item.starship_class  \r\n                },\r\n                {\r\n                    title: \"Marca\",\r\n                    value: item.manufacturer   \r\n                },\r\n                {\r\n                    title: \"Preço\",\r\n                    value: item.cost_in_credits    \r\n                },\r\n                {\r\n                    title: \"Largura\",\r\n                    value: item.length     \r\n                },\r\n                {\r\n                    title: \"Tripulação\",\r\n                    value: item.crew      \r\n                },\r\n                {\r\n                    title: \"Passageiros\",\r\n                    value: item.passengers       \r\n                },\r\n                {\r\n                    title: \"Velocidade Máxima\",\r\n                    value: item.max_atmosphering_speed        \r\n                },\r\n                {\r\n                    title: \"Limite de peso/transporte\",\r\n                    value: item.cargo_capacity         \r\n                },\r\n                {\r\n                    title: \"Quem já pilotou\",\r\n                    value: item.pilots          \r\n                }\r\n                ]\r\n            }))\r\n        case \"vehicles\":\r\n            return itens.map(item => ({\r\n                title: item.name,\r\n                infos: [{\r\n                    title: \"Modelo\",\r\n                    value: item.model  \r\n                },\r\n                {\r\n                    title: \"Classe\",\r\n                    value: item.vehicle_class   \r\n                },\r\n                {\r\n                    title: \"Marca\",\r\n                    value: item.manufacturer   \r\n                },\r\n                {\r\n                    title: \"Preço\",\r\n                    value: item.cost_in_credits    \r\n                },\r\n                {\r\n                    title: \"Largura\",\r\n                    value: item.length     \r\n                },\r\n                {\r\n                    title: \"Tripulação\",\r\n                    value: item.crew      \r\n                },\r\n                {\r\n                    title: \"Passageiros\",\r\n                    value: item.passengers       \r\n                },\r\n                {\r\n                    title: \"Velocidade Máxima\",\r\n                    value: item.max_atmosphering_speed        \r\n                },\r\n                {\r\n                    title: \"Limite de peso/transporte\",\r\n                    value: item.cargo_capacity         \r\n                },\r\n                {\r\n                    title: \"Quem já pilotou\",\r\n                    value: item.pilots          \r\n                }\r\n                ]\r\n            }))\r\n        default:\r\n            return [];\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport 'tachyons';\r\nimport Menu from \"./Menu\";\r\nimport Searchbox from './Searchbox';\r\nimport CardList from \"./CardList\";\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            searchfield: '',\r\n            elementos: [],\r\n            select: 'films'\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        fetch(`https://swapi.co/api/${this.state.select}/?search=${this.state.searchfield}`).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            this.setState({elementos: response.results});\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Star <br></br> wars <br></br>APP</h1>\r\n                <main>\r\n                    <p>\r\n                        Bem vindo ao Starwars WEB-APP, aqui você pode pesquisar sobre personagens,\r\n                        planetas, naves, filmes ou espécies que pertencem ao contexto Starwars!\r\n                        <br></br>\r\n                        <br></br>\r\n                    </p>\r\n                    <Menu value={this.state.select} setValue={(value) => {\r\n                        this.setState({select: value});\r\n                         \r\n                    }}/>\r\n\r\n                    <p>\r\n                        Digite o nome:\r\n                    </p>\r\n                    <Searchbox value={this.state.searchfield} setValue={(value) => {\r\n                        this.setState({searchfield: value});\r\n                        this.componentDidMount();\r\n                        console.log(this.state.elementos)\r\n                    }}/>\r\n                    <br>\r\n                    </br>\r\n                    <CardList \r\n                        genero={this.state.select} \r\n                        itens={this.state.elementos}\r\n                        nome={this.state.searchfield}/>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}